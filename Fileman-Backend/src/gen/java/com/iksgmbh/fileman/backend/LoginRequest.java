package com.iksgmbh.fileman.backend;

import java.lang.String;

import javax.validation.constraints.*;
import javax.persistence.*;

import io.swagger.annotations.*;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.annotation.JsonProperty.Access;

/**
 * This file is autogenerated by MOGLiCC. Do not modify manually!
 */
public class LoginRequest
{
	// ===============  instance fields  ===============

    @Size(max=64, message="Value of attribute 'userId' is larger than valid maximum (64).")
    @ApiModelProperty(notes = "Valid maximum length is 64.")
    private String userId;

    @Size(max=32, message="Value of attribute 'userPw' is larger than valid maximum (32).")
    @ApiModelProperty(notes = "Valid maximum length is 32.")
    private String userPw;

    private String tenant;

    @NotNull(message="Value of mandatory attribute 'filemanVersion' is not present.")
    @ApiModelProperty(notes = "Mandatory.")
    private String filemanVersion;


	// ===============  setter methods  ===============

	public void setUserId(final String userId)
	{
		this.userId = userId;
	}

	public void setUserPw(final String userPw)
	{
		this.userPw = userPw;
	}

	public void setTenant(final String tenant)
	{
		this.tenant = tenant;
	}

	public void setFilemanVersion(final String filemanVersion)
	{
		this.filemanVersion = filemanVersion;
	}

	// ===============  getter methods  ===============

	public String getUserId()
	{
		return userId;
	}

	public String getUserPw()
	{
		return userPw;
	}

	public String getTenant()
	{
		return tenant;
	}

	public String getFilemanVersion()
	{
		return filemanVersion;
	}

	// ===============  additional Javabean methods  ===============

	@Override
	public String toString()
	{
		return "LoginRequest ["
				+ "userId = " + userId + ", "
				+ "userPw = " + userPw + ", "
				+ "tenant = " + tenant + ", "
				+ "filemanVersion = " + filemanVersion + ""
				+ "]";
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;

		final LoginRequest other = (LoginRequest) obj;

		if (userId == null)
		{
			if (other.userId != null)
				return false;
		} else
		{
			if (! userId.equals(other.userId))
				   return false;
		}
		if (userPw == null)
		{
			if (other.userPw != null)
				return false;
		} else
		{
			if (! userPw.equals(other.userPw))
				   return false;
		}
		if (tenant == null)
		{
			if (other.tenant != null)
				return false;
		} else
		{
			if (! tenant.equals(other.tenant))
				   return false;
		}
		if (filemanVersion == null)
		{
			if (other.filemanVersion != null)
				return false;
		} else
		{
			if (! filemanVersion.equals(other.filemanVersion))
				   return false;
		}
		return true;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;

		result = prime * result + ((userId == null) ? 0 : userId.hashCode());
		result = prime * result + ((userPw == null) ? 0 : userPw.hashCode());
		result = prime * result + ((tenant == null) ? 0 : tenant.hashCode());
		result = prime * result + ((filemanVersion == null) ? 0 : filemanVersion.hashCode());

		return result;
	}


	public void merge(LoginRequest otherLoginRequest)
	{
        if (otherLoginRequest.getUserId() != null) {
            if(! otherLoginRequest.getUserId().isEmpty()) {
           	 this.setUserId(otherLoginRequest.getUserId());
            }
       }
        if (otherLoginRequest.getUserPw() != null) {
            if(! otherLoginRequest.getUserPw().isEmpty()) {
           	 this.setUserPw(otherLoginRequest.getUserPw());
            }
       }
        if (otherLoginRequest.getTenant() != null) {
            if(! otherLoginRequest.getTenant().isEmpty()) {
           	 this.setTenant(otherLoginRequest.getTenant());
            }
       }
        if (otherLoginRequest.getFilemanVersion() != null) {
            if(! otherLoginRequest.getFilemanVersion().isEmpty()) {
           	 this.setFilemanVersion(otherLoginRequest.getFilemanVersion());
            }
       }
	}
}